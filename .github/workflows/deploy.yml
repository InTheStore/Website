name: CI/CD Pipeline

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME_BACKEND: ${{ github.repository }}/backend
  IMAGE_NAME_FRONTEND: ${{ github.repository }}/frontend

jobs:
  test:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      # Frontend Tests Only
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"

      - name: Cache node modules
        uses: actions/cache@v3
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}

      - name: Install frontend dependencies
        run: |
          cd frontend
          npm ci

      - name: Build React app
        run: |
          cd frontend
          npm run build

      # Skip Django tests for now
      - name: Django tests placeholder
        run: echo "Django tests skipped - will configure later"

  deploy:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'

    steps:
      - uses: actions/checkout@v4

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push backend image
        env:
          IMAGE_TAG: ${{ github.sha }}
        run: |
          cd backend
          FULL_IMAGE_NAME=$(echo "${{ env.REGISTRY }}/${{ env.IMAGE_NAME_BACKEND }}" | tr '[:upper:]' '[:lower:]')
          docker build -t $FULL_IMAGE_NAME:$IMAGE_TAG .
          docker push $FULL_IMAGE_NAME:$IMAGE_TAG
          docker tag $FULL_IMAGE_NAME:$IMAGE_TAG $FULL_IMAGE_NAME:latest
          docker push $FULL_IMAGE_NAME:latest

      - name: Build and push frontend image
        env:
          IMAGE_TAG: ${{ github.sha }}
        run: |
          cd frontend
          FULL_IMAGE_NAME=$(echo "${{ env.REGISTRY }}/${{ env.IMAGE_NAME_FRONTEND }}" | tr '[:upper:]' '[:lower:]')
          docker build -t $FULL_IMAGE_NAME:$IMAGE_TAG .
          docker push $FULL_IMAGE_NAME:$IMAGE_TAG
          docker tag $FULL_IMAGE_NAME:$IMAGE_TAG $FULL_IMAGE_NAME:latest
          docker push $FULL_IMAGE_NAME:latest

      - name: Setup restricted SSH access
        run: |
          # Remove open access rule (0.0.0.0/0)
          echo "Removing open SSH access..."
          aws ec2 revoke-security-group-ingress \
            --group-id ${{ secrets.EC2_SECURITY_GROUP_ID }} \
            --protocol tcp \
            --port 22 \
            --cidr 0.0.0.0/0 2>/dev/null || echo "Open access rule not found"

          # Add your personal IP (optional - add as GitHub secret)
          if [ ! -z "${{ secrets.MY_IP_ADDRESS }}" ]; then
            echo "Adding personal IP access..."
            aws ec2 authorize-security-group-ingress \
              --group-id ${{ secrets.EC2_SECURITY_GROUP_ID }} \
              --protocol tcp \
              --port 22 \
              --cidr ${{ secrets.MY_IP_ADDRESS }}/32 2>/dev/null || echo "Personal IP rule already exists"
          fi

          # Add GitHub Actions IP ranges
          GITHUB_IPS=$(curl -s https://api.github.com/meta | jq -r '.actions[]')
          echo "Adding GitHub Actions IP ranges..."
          for ip in $GITHUB_IPS; do
            aws ec2 authorize-security-group-ingress \
              --group-id ${{ secrets.EC2_SECURITY_GROUP_ID }} \
              --protocol tcp \
              --port 22 \
              --cidr $ip 2>/dev/null || echo "Rule for $ip already exists"
          done

      - name: Deploy to EC2
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            # Navigate to app directory
            cd ~/Website

            # Login to GitHub Container Registry
            echo ${{ secrets.GITHUB_TOKEN }} | docker login ghcr.io -u ${{ github.actor }} --password-stdin

            # Update environment variables for domain
            export DOMAIN_NAME="cafes.caffenate.xyz"
            export BACKEND_URL="https://$DOMAIN_NAME/api"
            export FRONTEND_URL="https://$DOMAIN_NAME"

            # Pull latest images
            docker-compose pull

            # Stop and restart services
            docker-compose down
            docker-compose up -d

            # Wait for services to be ready
            sleep 30

            # Check if services are running
            docker-compose ps

            # Collect static files (if needed)
            docker-compose exec -T backend python manage.py collectstatic --noinput || true

            # Update Caddyfile for domain
            sudo tee /etc/caddy/Caddyfile > /dev/null <<EOF
            cafes.caffenate.xyz {
                # Backend API - MUST come before frontend catch-all
                handle /api/* {
                    reverse_proxy localhost:8000
                }
                
                # Frontend (React app) - This should be LAST as it's a catch-all
                handle /* {
                    reverse_proxy localhost:3000
                }
            }
            EOF

            # Reload Caddy with new configuration
            sudo systemctl reload caddy

            # Test if domain and API are accessible
            sleep 10
            echo "Testing website accessibility..."
            curl -I https://cafes.caffenate.xyz || echo "Website not accessible"

            echo "Testing API accessibility..."
            curl -I https://cafes.caffenate.xyz/api/ || echo "API not accessible"

            echo "Testing backend direct access..."
            curl -I http://localhost:8000/ || echo "Backend not accessible directly"

            # Check Django logs for any errors
            echo "Checking backend logs..."
            docker-compose logs --tail=20 django-backend

            # Check Caddy logs
            echo "Checking Caddy logs..."
            sudo journalctl -u caddy --no-pager --lines=10
